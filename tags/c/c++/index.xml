<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on 安怡的博客</title>
    <link>https://anyicomplex.github.io/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on 安怡的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2021 © anyicomplex</copyright><atom:link href="https://anyicomplex.github.io/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Xlib编程注意事项 1</title>
      <link>https://anyicomplex.github.io/posts/xlib-programming-notes-1/</link>
      <pubDate>Sun, 20 Feb 2022 11:02:21 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/xlib-programming-notes-1/</guid>
      <description> 谨慎使用XGrabPointer，使用前一定要做好强制退出程序的准备（今天我被坑到了，还不止一次QAQ）  </description>
    </item>
    
    <item>
      <title>给C&#43;&#43;初学者的一些建议</title>
      <link>https://anyicomplex.github.io/posts/some-advice-for-cpp-beginners/</link>
      <pubDate>Sat, 19 Feb 2022 09:33:19 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/some-advice-for-cpp-beginners/</guid>
      <description>基础  在学C++之前先学C语言，掌握堆栈等基本概念，并能够熟练使用指针和宏。 新版本的特性先不要学，哪怕只是用于学习而非生产，也建议只使用长期支持的稳定版本。  应用  先别急着深入学习模板等C++高级特性，对新手而言，把C++当作“带类的C”是最稳妥的使用方法。 STL里有的东西就不要去找第三方库了（除非这个库真的比STL的那部分好并且长期有人维护）。 Boost可以用，但也仅仅只是可以用，因为坑太多。对新手而言，很多时候难以分辨是自己写的程序的问题还是编译器或Boost的问题（STL就好得多，毕竟Boost是STL的上游）。  编译器  Windows下不建议使用MSVC以外的编译器，否则坑很多。 Linux下Clang和GCC均可，但我一般建议使用GCC。 macOS下建议Clang。  IDE VSCode不是IDE，是文本编辑器，所以不在这个推荐列表内（当然，我推荐它，因为我没钱买IDEA Ultimate却需要写JNI，它帮了大忙:D）。
 Qt开发者可以直接用Qt的工具链。 Eclipse和Code::Blocks老用户可以继续用，这两个IDE不是不好，是难以上手，当然对老用户而言没什么问题。 Windows下建议Visual Studio和MSVC配合使用，如果用惯了JetBrains系的IDE也可以用CLion，其他不推荐。 Linux下，建议CLion，KDE桌面也可以使用KDevelop，但其他桌面不建议（因为KDevelop的依赖会带一大堆KDE的软件包，这也是KDE应用的通病，耦合度太高），GNOME桌面也可以使用GNOME Builder（这个其他桌面用也没什么问题），其他不推荐。 macOS下建议XCode，觉得不好用就换AppCode/CLion，其他没有更好的了。  </description>
    </item>
    
    <item>
      <title>用C语言的风格写Java程序</title>
      <link>https://anyicomplex.github.io/posts/writing-c-style-java-programs/</link>
      <pubDate>Sun, 13 Feb 2022 08:52:46 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/writing-c-style-java-programs/</guid>
      <description>可行性 都说Java是纯面向对象的编程语言，那么能不能在Java中写面向过程风格的代码呢？
Java中虽然没有指针，但有引用，所以答案显然是可以的。
风格的区别 先来看两段伪代码：
C语言风格 struct Foo foo; change_foo_value(&amp;amp;foo, 0); Java风格 Foo foo = new Foo(); foo.changeValue(0); 这同样也能体现面向对象和面向过程两种设计模式的区别。
两种风格都不错，是吧？
实际应用中的问题 如果某个方法需要返回两种值，该怎么写程序？
设需求为：用程序启动Shell脚本，获取脚本的返回值和输出。
C语言风格 int exec_script(char *script_path, char **output) { int exit_code; // Business logic 	... return exit_code; } Java风格 class Result { public final int exitCode; public final String output; public Result(int exitCode, String output) { this.exitCode = exitCode; this.output = output; } } Result execScript(String scriptPath) { int exitCode; StringBuilder outputBuffer = new StringBuilder(); // Business logic 	.</description>
    </item>
    
  </channel>
</rss>
