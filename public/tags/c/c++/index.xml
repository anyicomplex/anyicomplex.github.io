<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on 安怡的博客</title>
    <link>https://anyicomplex.github.io/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on 安怡的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2021-2022 © anyicomplex</copyright><atom:link href="https://anyicomplex.github.io/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>对 C/C&#43;&#43; 程序体积的极致裁剪</title>
      <link>https://anyicomplex.github.io/posts/ultimate-trimming-for-c-cpp-programs-size/</link>
      <pubDate>Mon, 28 Feb 2022 15:45:19 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/ultimate-trimming-for-c-cpp-programs-size/</guid>
      <description>起因 程序的分发一直是困扰各大程序员的老大难问题，尤其是在小程序的分发上。
如果你只是写了个功能很有限的小程序，却要拖家带口 几十M 的运行时，我相信，用户一定会觉得不值得的。
如果你以“现在硬盘白菜价了”或者“都 5G 时代了，网络带宽早不值钱了”这种理由来反驳我，那么请立即关闭我的这篇博文，因为这不是写给你看的。
方法 1.动态调用运行时 只要目标设备包含了程序所需的运行时和依赖库，就可以通过动态调用的方式缩小体积。
*nix 这在 *nix 平台下不是问题，因为必定包含可用的 C/C++ 运行时，又在程序库方面做到了模块化，在使用包管理器的情况下只需要指定对应的依赖，否则就只能让用户手动去安装了。
如果不想麻烦用户，又不使用包管理器，那么就只有减少依赖，只使用目标平台必定包含的库了。
Windows Windows 并没有做到程序库方面的模块化，除了一些基本的 C/C++ 运行时库，所以只有减少依赖一种方法。
但如果要兼容老版本系统的话，必定包含的库就极其有限，甚至连部分基本的 C/C++ 运行时库也不是必定包含，这时候要么麻烦用户，要么就只能用老版本的运行时库了。
1.使用 Visual C++ 6.0 用 VC6.0 编译出的 C/C++ 程序，运行时就只有 msvcrt.dll 这一个库，而这个库从 Windows 2000 起就必定包含在系统中了。
2.使用 msvcrt 版本的 MinGW 并且不使用和 msvcrt 不支持的 C++ 功能 如果不想用 VC6.0 这种停止维护多年的编译器，又想保证兼容性和裁剪体积，那么使用 msvcrt 版本的 MinGW 并且不使用 msvcrt 不支持的 C++ 功能也是一种不错的方案。
这种方案下，msvcrt 版本的 MinGW 编译出的 C/C++ 程序和 VC6.0 一样，运行时只有 msvcrt.dll 一个库。</description>
    </item>
    
    <item>
      <title>在 Linux 下编写和编译 win32 程序</title>
      <link>https://anyicomplex.github.io/posts/writing-and-compiling-win32-programs-under-linux/</link>
      <pubDate>Mon, 28 Feb 2022 14:24:36 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/writing-and-compiling-win32-programs-under-linux/</guid>
      <description>本文所说的 win32 是中国大陆程序员圈子对 winapi 的俗称，不是特指 32 位 winapi（别说 64 位了，自从 32 位 winapi 出现，对早期 16 位的 winapi 我们也这么叫）。
可行性 得益于 MinGW（Minimalist GNU for Windows）这个项目，只要不涉及到比较高层次的封装（MFC、WPF等），是完全可行的。（实际上也有各种奇技淫巧使用 MFC 和 WPF，但我不建议那么做，如果真要那么做，在 Wine 下使用 MSVC 也许会更好一点）
当然，因为原 MinGW 项目不支持 64 位，我这里说的 MinGW 都是指 MinGW-w64（和原 MinGW 不是同一个项目）。
安装 一般而言，主流 Linux 发行版的软件源都会包含 MinGW 相关的软件包，当然，如果没有，或者需要官方源已有软件包以外的功能，也可以自己去官网下载源码和编译好的可执行文件什么的～详情请参阅 https://www.mingw-w64.org/downloads/
我现在使用的操作系统是 Fedora 35，是参考这篇官方文档装的。
除非官方文档太烂，否则还是建议跟着官方文档来。
使用 “MinGW 不生产工具链，只是 GNU 工具链的搬运工。”
除了命令的名称不同以外，其他都和 GNU 工具链一样，举个例子，编译 64 位 C 语言程序，把 gcc 换成 x86_64-w64-mingw32-gcc 即可。
除编译器以外，MinGW 里还有不少其他的工具，用于和编译器配套使用（Linux 原装的 GNU 构建工具无法和 MinGW 编译器配套使用，或者需要额外配置）。配置 IDE 或文本编辑器的时候，一定要把全套工具都换成 MinGW 的！</description>
    </item>
    
    <item>
      <title>Xlib 编程注意事项 1</title>
      <link>https://anyicomplex.github.io/posts/xlib-programming-notes-1/</link>
      <pubDate>Sun, 20 Feb 2022 11:02:21 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/xlib-programming-notes-1/</guid>
      <description> 谨慎使用 XGrabPointer，使用前一定要做好强制退出程序的准备（今天我被坑到了，还不止一次QAQ）  </description>
    </item>
    
    <item>
      <title>给 C&#43;&#43; 初学者的一些建议</title>
      <link>https://anyicomplex.github.io/posts/some-advice-for-cpp-beginners/</link>
      <pubDate>Sat, 19 Feb 2022 09:33:19 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/some-advice-for-cpp-beginners/</guid>
      <description>基础  在学 C++ 之前先学 C 语言，掌握堆栈等基本概念，并能够熟练使用指针和宏。 新版本的特性先不要学，哪怕只是用于学习而非生产，也建议只使用长期支持的稳定版本。  应用  先别急着深入学习模板等 C++ 高级特性，对新手而言，把 C++ 当作“带类的 C”是最稳妥的使用方法。 STL 里有的东西就不要去找第三方库了（除非这个库真的比 STL 的那部分好并且长期有人维护）。 Boost 可以用，但也仅仅只是可以用，因为坑太多。对新手而言，很多时候难以分辨是自己写的程序的问题还是编译器或 Boost 的问题（STL 就好得多，毕竟 Boost 是 STL 的上游）。  编译器  Windows 下不建议使用 MSVC 以外的编译器，否则坑很多。 Linux 下 Clang 和 GCC 均可，但我一般建议使用 GCC。 macOS 下建议 Clang。  IDE VSCode 不是 IDE，是文本编辑器，所以不在这个推荐列表内（当然，我推荐它，因为我没钱买 IDEA Ultimate 却需要写 JNI，它帮了大忙:D）。
 Qt 开发者可以直接用 Qt 的工具链。 Eclipse 和 Code::Blocks 老用户可以继续用，这两个 IDE 不是不好，是难以上手，当然对老用户而言没什么问题。 Windows 下建议 Visual Studio 和 MSVC 配合使用，如果用惯了 JetBrains 系的 IDE 也可以用 CLion，其他不推荐。 Linux 下，建议 CLion，KDE 桌面也可以使用 KDevelop，但其他桌面不建议（因为 KDevelop 的依赖会带一大堆 KDE 的软件包，这也是 KDE 应用的通病，耦合度太高），GNOME 桌面也可以使用 GNOME Builder（这个其他桌面用也没什么问题），其他不推荐。 macOS 下建议 XCode，如果觉得不好用，就换 AppCode/CLion，其他没有更好的了。  </description>
    </item>
    
    <item>
      <title>用 C 语言的风格写 Java 程序</title>
      <link>https://anyicomplex.github.io/posts/writing-c-style-java-programs/</link>
      <pubDate>Sun, 13 Feb 2022 08:52:46 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/writing-c-style-java-programs/</guid>
      <description>可行性 都说 Java 是纯面向对象的编程语言，那么能不能在 Java 中写面向过程风格的代码呢？
Java 中虽然没有指针，但有引用，所以答案显然是可以的。
风格的区别 先来看两段伪代码：
C 语言风格 struct Foo foo; change_foo_value(&amp;amp;foo, 0); Java 风格 Foo foo = new Foo(); foo.changeValue(0); 这同样也能体现面向对象和面向过程两种设计模式的区别。
两种风格都不错，是吧？
实际应用中的问题 如果某个方法需要返回两种值，该怎么写程序？
设需求为：用程序启动 Shell 脚本，获取脚本的返回值和输出。
C 语言风格 int exec_script(char *script_path, char **output) { int exit_code; // Business logic 	... return exit_code; } Java 风格 class Result { public final int exitCode; public final String output; public Result(int exitCode, String output) { this.exitCode = exitCode; this.</description>
    </item>
    
  </channel>
</rss>
