<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on anyicomplex&#39;s Blog</title>
    <link>https://anyicomplex.github.io/en/tags/c/</link>
    <description>Recent content in C on anyicomplex&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 - 2022 Â© anyicomplex</copyright>
    <lastBuildDate>Mon, 28 Feb 2022 15:45:19 -0500</lastBuildDate><atom:link href="https://anyicomplex.github.io/en/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ultimate Trimming for C/C&#43;&#43; Programs Size</title>
      <link>https://anyicomplex.github.io/en/posts/ultimate-trimming-for-c-cpp-programs-size/</link>
      <pubDate>Mon, 28 Feb 2022 15:45:19 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/en/posts/ultimate-trimming-for-c-cpp-programs-size/</guid>
      <description>Causes Program release has always been a major problem for programmers, especially in the distribution of applets.
If you wrote a small program with limited functionality, but it depends on a heavy runtime in dozens of megabytes, I believe that many users will not think it&amp;rsquo;s worth to use.
If you refute me with reasons like &amp;ldquo;hard disks are now at a cabbage price&amp;rdquo; or &amp;ldquo;network bandwidth is worthless now that we&amp;rsquo;re in the 5G era&amp;rdquo;, then please close this blog post immediately because it&amp;rsquo;s not written for you.</description>
    </item>
    
    <item>
      <title>Writing and Compiling win32 Programs under Linux</title>
      <link>https://anyicomplex.github.io/en/posts/writing-and-compiling-win32-programs-under-linux/</link>
      <pubDate>Mon, 28 Feb 2022 14:24:36 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/en/posts/writing-and-compiling-win32-programs-under-linux/</guid>
      <description>The term &amp;ldquo;win32&amp;rdquo; in this article is the common name for winapi in mainland China programmers&#39; circles, not specifically for 32-bit winapi (not to mention 64-bit, we also calling the earlier 16-bit winapi &amp;ldquo;win32&amp;rdquo; since the appearance of 32-bit winapi).
Feasibility Thanks to the MinGW (Minimalist GNU for Windows) project, it is perfectly feasible to compile win32 applications as long as not involve higher-level packaging (MFC, WPF, etc.). (There are actually various tricks to use MFC and WPF, but I don&amp;rsquo;t recommend it, and if you want to do that, it might be better to use MSVC under Wine)</description>
    </item>
    
    <item>
      <title>Xlib Programming Notes 1</title>
      <link>https://anyicomplex.github.io/en/posts/xlib-programming-notes-1/</link>
      <pubDate>Sun, 20 Feb 2022 11:02:21 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/en/posts/xlib-programming-notes-1/</guid>
      <description> Be careful with the XGrabPointer and been prepared to force the program exit before using it (I was pitted today, and more than once QAQ)  </description>
    </item>
    
    <item>
      <title>Writing C-style Java Programs</title>
      <link>https://anyicomplex.github.io/en/posts/writing-c-style-java-programs/</link>
      <pubDate>Sun, 13 Feb 2022 08:52:46 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/en/posts/writing-c-style-java-programs/</guid>
      <description>Feasibility Java is said to be a pure object-oriented programming language, so can you write procedural-oriented C-style code in Java?
There are no pointers in Java, but there are references, so the answer is obviously yes.
The difference in style Let&amp;rsquo;s start with two pieces of pseudo-code.
C style struct Foo foo; change_foo_value(&amp;amp;foo, 0); Java style Foo foo = new Foo(); foo.changeValue(0); This also shows the difference between the two design patterns, object-oriented and procedure-oriented.</description>
    </item>
    
  </channel>
</rss>
