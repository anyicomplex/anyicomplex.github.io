<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 安怡的博客</title>
    <link>https://anyicomplex.github.io/posts/</link>
    <description>Recent content in Posts on 安怡的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2021 © anyicomplex</copyright>
    <lastBuildDate>Sun, 13 Feb 2022 08:52:46 -0500</lastBuildDate><atom:link href="https://anyicomplex.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用C语言的风格写Java程序</title>
      <link>https://anyicomplex.github.io/posts/writing-c-style-java-programs/</link>
      <pubDate>Sun, 13 Feb 2022 08:52:46 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/writing-c-style-java-programs/</guid>
      <description>可行性 都说Java是纯面向对象的编程语言，那么能不能在Java中写面向过程风格的代码呢？
Java中虽然没有指针，但有引用，所以答案显然是可以的。
风格的区别 先来看两段伪代码：
C语言风格 struct Foo foo; change_foo_value(&amp;amp;foo, 0); Java风格 Foo foo = new Foo(); foo.changeValue(0); 这同样也能体现面向对象和面向过程两种设计模式的区别。
两种风格都不错，是吧？
实际应用中的问题 如果某个方法需要返回两种值，该怎么写程序？
设需求为：用程序启动Shell脚本，获取脚本的返回值和输出。
C语言风格 int exec_script(char *script_path, char *output) { int exit_code; // Business logic 	... return exit_code; } Java风格 class Result { public final int exitCode; public final String output; public Result(int exitCode, String output) { this.exitCode = exitCode; this.output = output; } } Result execScript(String scriptPath) { int exitCode; StringBuilder outputBuffer = new StringBuilder(); // Business logic 	.</description>
    </item>
    
    <item>
      <title>我回来了</title>
      <link>https://anyicomplex.github.io/posts/i-am-back/</link>
      <pubDate>Wed, 09 Feb 2022 06:18:18 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/i-am-back/</guid>
      <description>抱歉，很抱歉，非常抱歉，我食言了&amp;hellip;&amp;hellip;
上次说会有巨量更新，结果就写了一篇&amp;hellip;&amp;hellip;
就连过年，我都没发博&amp;hellip;&amp;hellip;
这段时间发生了很多事&amp;hellip;&amp;hellip;
首先，我玩 Mirage Realms 玩上瘾了（因为真的很好玩:D）
然后，我决定用 Java 和 libGDX 开发游戏了（自己打自己的脸，详情）还做了一些相关工作（gdx-svmhelper 和 gdx-bmfont）
然后，结交了外国友人 Berstanio（没猜错的话这位应该是德国人吧）
最后，在这段赛博时光中，我意识到，我需要有计划，需要有短期目标，需要做很多功课，需要学习很多很多。
新的一年，加油！</description>
    </item>
    
    <item>
      <title>使用Linux的理由</title>
      <link>https://anyicomplex.github.io/posts/reasons-to-use-linux/</link>
      <pubDate>Wed, 08 Dec 2021 08:17:44 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/reasons-to-use-linux/</guid>
      <description>本文仅代表个人观点，欢迎留言讨论。
1.轻量级 （以x86_64操作系统为例，针对日常使用，因此注重轻量级精简太多功能的发行版不算在内）    操作系统 最低CPU需求 最低内存需求 最低储存需求     Windows 11 1 GHz * 2 4 GB 64 GB   Windows 10 1 GHz 2 GB 20 GB   Windows 7 1 GHz 2 GB 20 GB   Fedora 35 (GNOME) 2 GHz 2 GB 15 GB   Debian 11 (GNOME) 1 GHz 1 GB 10 GB    数据均来自官网</description>
    </item>
    
    <item>
      <title>博客翻新2</title>
      <link>https://anyicomplex.github.io/posts/blog-refurbishment2/</link>
      <pubDate>Wed, 08 Dec 2021 04:41:08 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/blog-refurbishment2/</guid>
      <description>最近终于被调到有电脑的岗位上了
先摸鱼为敬
闲着也是闲着，不如翻新博客:D
这次，这个主题我认为细节不尽如人意的地方几乎都做了修改，也修改了主页
话说今天好像是我生日来着，自己都差点忘了XD</description>
    </item>
    
    <item>
      <title>博客翻新</title>
      <link>https://anyicomplex.github.io/posts/blog-refurbishment/</link>
      <pubDate>Mon, 06 Dec 2021 06:56:16 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/blog-refurbishment/</guid>
      <description>两个月过去了，我又想起这个博客了XD
于是就&amp;hellip;&amp;hellip;修改了主题，翻新（并没有）了一下，评论系统也从 Utterances 换成了 Gitalk（当然，原来的评论也没有了&amp;gt;_&amp;lt;）
新的主题：Diary
接下来一段时间会有巨量更（水）新（文）&amp;hellip;&amp;hellip;大概就这样吧！敬请期待！</description>
    </item>
    
    <item>
      <title>写给想用Java开发游戏的人的话</title>
      <link>https://anyicomplex.github.io/posts/words-for-those-want-to-develop-game-in-java/</link>
      <pubDate>Thu, 07 Oct 2021 02:23:11 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/words-for-those-want-to-develop-game-in-java/</guid>
      <description>本文仅代表个人观点，欢迎留言讨论。
Java适合开发游戏吗？ 我的答案是：不适合。
如果你不追求开源，Unity和GameMaker这类成熟的商业解决方案显然是最好的选择。
如果你追求开源，多如牛毛的开源游戏引擎（绝大多数是用C/C++编写的）总有一款是你的菜。（这里不列举，请自行到各大开源平台搜索）
如果现有游戏引擎都不能使你满意，你可以尝试自己编写——但是，我不推荐使用Java，准确地说，不推荐使用任何一门委托型语言，甚至带GC的非委托型语言我都不推荐。低延迟的即时交互对于电子游戏而言是至关重要的，在这方面，委托型语言先天不足。（Unity虽然用C#做开发，但底层还是C/C++，并且针对C#代码进行了AOT编译，以提升性能）
如果你没有非用Java不可的理由，就请打消用Java开发游戏的念头。
如果我非用Java不可呢？ Java的生态很庞大，事实上，相对成熟的解决方案还是有的。
 libGDX：侧重于2D，支持平台：Windows/Linux/Mac/Android/iOS/HTML5 jMonkeyEngine：纯3D，支持平台：Windows/Linux/Mac/Android/iOS/HTML5  我认为相对完善的Java游戏引擎只有这两个，其他都不够成熟。
尝试使用libGDX开发3D游戏不是个明智的选择，而用jMonkeyEngine开发2D游戏是一件相当不理智的事。
Java能开发像王者荣耀那样的大型游戏吗？ 能。
Java的缺陷从来就不在大型化上，不然也不会有那么多服务器跑SpringBoot一类用Java编写的Web后端框架了。
大名鼎鼎的PokeMMO就是用libGDX开发的。
用Java开发游戏需要注意些什么？ 在桌面平台，几乎不可能让玩家们专门为你的游戏去安装JRE。
因此，必须在打包和精简JRE上下足功夫，提供不同桌面平台对应的安装包，保证开箱即用的用户体验。
JRE的体积曾是个问题，但好在如今对游戏文件的体积要求也没有那么高了。
至于其他问题，那不属于Java的范畴，而是所有游戏开发者都需要面对的问题。
GraalVM的native-image技术可以用于Java游戏开发吗？ 理论上可行，但我不推荐。
除非你对缩小游戏文件体积有较高的要求，否则这么做只会让你在损失很多Java特性和第三方库的同时面临很多不必要的麻烦。
把Java字节码完全AOT成本地可执行文件可以减少启动时间和系统资源占用，但这都不是游戏开发的重点。
如果你很看重游戏文件体积、系统资源占用和启动时间，那么还是趁早打消用Java开发游戏的念头。</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://anyicomplex.github.io/posts/hello-world/</link>
      <pubDate>Tue, 05 Oct 2021 04:33:30 -0500</pubDate>
      
      <guid>https://anyicomplex.github.io/posts/hello-world/</guid>
      <description>主题：Github Style （注：这是博客开张时使用的主题，现已更改）
大概会是日记性质的博客 :D</description>
    </item>
    
  </channel>
</rss>
